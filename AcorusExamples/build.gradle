// Gradle script to build the AcorusExamples subproject of Acorus

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application' // to build JVM applications
}

// Register tasks to run specific applications:

tasks.register('AppChooser', JavaExec) {
    mainClass = 'jme3utilities.ui.test.AppChooser'
}
tasks.register('HelloAcorus', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloAcorus'
}
tasks.register('HelloBind', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloBind'
}
tasks.register('HelloCoas', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloCoas'
}
tasks.register('HelloCombo', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloCombo'
}
tasks.register('HelloRecorder', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloRecorder'
}
tasks.register('HelloSandbox', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloSandbox'
}
tasks.register('HelloSignals', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloSignals'
}
tasks.register('HelloSimpleApplication', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloSimpleApplication'
}
tasks.register('HelloToggleHelp', JavaExec) {
    mainClass = 'jme3utilities.ui.test.HelloToggleHelp'
}
tasks.register('TestAcorusDemo', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestAcorusDemo'
}
tasks.register('TestCursors', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestCursors'
}
tasks.register('TestDsEdit', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestDsEdit'
}
tasks.register('TestDsEdit-deleteSettings', JavaExec) {
    args '--deleteOnly'
    mainClass = 'jme3utilities.ui.test.TestDsEdit'
}
tasks.register('TestDsEdit-resetSettings', JavaExec) {
    args '--resetOnly'
    mainClass = 'jme3utilities.ui.test.TestDsEdit'
}
tasks.register('TestHeadless', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestHeadless'
}
tasks.register('TestHotkeys', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestHotkeys'
}
tasks.register('TestToggleFly', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestToggleFly'
}
tasks.register('TestTwoModes', JavaExec) {
    mainClass = 'jme3utilities.ui.test.TestTwoModes'
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'jme3utilities.ui.test.AppChooser'
}
jar.manifest.attributes('Main-Class': 'jme3utilities.ui.test.AppChooser')

dependencies {
    implementation(libs.commons.exec)
    implementation(libs.heart)
    runtimeOnly(libs.jme3.awt.dialogs)
    implementation(libs.jme3.desktop)
    implementation(libs.jme3.lwjgl3)
    runtimeOnly(libs.jme3.testdata) // for Jaime

    // AcorusExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly(libs.jme3.jogg)
    runtimeOnly(libs.jme3.plugins)

    //implementation 'com.github.stephengold:Acorus:' + acorusVersion // for published library
    implementation project(':AcorusLibrary') // for local library build
}

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSandbox', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSandbox', Delete) { // Acorus sandbox
    delete 'Written Assets'
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
